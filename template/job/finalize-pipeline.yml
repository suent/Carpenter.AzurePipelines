# initialize-pipeline.yml
# Finalizes the Carpenter pipeline initialization.

#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:
  # See template/carpenter-default.yml
- name: buildType
  type: string

  # See template/carpenter-default.yml
- name: includePipeline
  type: boolean

  # See template/carpenter-default.yml
- name: defaultPoolType
  type: string

  # See template/carpenter-default.yml
- name: defaultPoolName
  type: string

  # See template/carpenter-default.yml
- name: defaultPoolDemands
  type: object

  # See template/carpenter-default.yml
- name: defaultPoolVMImage
  type: string
    
  # See template/carpenter-default.yml
- name: versionType
  type: string
  
  # See template/carpenter-default.yml
- name: incrementVersionOnRelease
  type: boolean


jobs:
- job: finalizePipeline
  displayName: Finalize pipeline

  dependsOn: initializePipeline

  pool:
    ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
      vmImage: ${{ parameters.defaultPoolVMImage }}
    ${{ if eq(parameters.defaultPoolType,'Private') }}:
      name: ${{ parameters.defaultPoolName }}
      ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
        demands: ${{ parameters.defaultPoolDemands }}


  variables:
  - template: ../variable/carpenter-final.yml
    parameters:
      defaultPoolType: ${{ parameters.defaultPoolType }}
  - ${{ if ne(parameters.versionType,'None') }}:
    - template: ../variable/version-final.yml
      parameters:
        buildType: ${{ parameters.buildType }}

  steps:
  - ${{ if and(eq(parameters.buildType, 'Release'), ne(parameters.incrementVersionOnRelease, 'true'))}}:
    - checkout: none

  - ${{ if and(eq(parameters.buildType, 'Release'), eq(parameters.incrementVersionOnRelease, 'true'))}}:
    - checkout: botRepoAccess
      persistCredentials: true

  - ${{ if eq(parameters.includePipeline, 'true') }}:
    - checkout: Carpenter
      persistCredentials: true

  - template: ../step/display-environment.yml
  - template: ../step/finalize-build-version.yml
    parameters:
      versionType: ${{ parameters.versionType }}

  # Increment build version
  - ${{ if and(eq(parameters.buildType, 'Release'),eq(parameters.incrementVersionOnRelease, 'true') }}:
    - powershell: |
        $newPatch = ([int]$env:CARPENTER_VERSION_PATCH) + 1
        $newVersion = "$($env:CARPENTER_VERSION_MAJOR).$($env:CARPENTER_VERSION_MINOR).$newPatch"
        Write-Host "Updating project version to $newVersion"
        Push-Location "$($env:AGENT_BUILDDIRECTORY)/$env:CARPENTER_PROJECT_PATH"

        # update VERSION file
        $versionFile = $env:CARPENTER_VERSION_VERSIONFILEPATH
        Write-Host "Using VERSION file: $versionFile"
        Set-Content -Path $versionFile -Value $newVersion -NoNewLine

        # configure user
        if ($env:CARPENTER_PIPELINE_BOT -and $env:CARPENTER_PIPELINE_BOTEMAIL) {
          $gitUserEmail = $env:CARPENTER_PIPELINE_BOTEMAIL
          $gitUser = $env:CARPENTER_PIPELINE_BOT
        } else {
          $gitUserEmail = $env:BUILD_REQUESTEDFOREMAIL
          $gitUser = $env:BUILD_REQUESTEDFOR
        }
        git config user.email "$gitUserEmail"
        git config user.name "$gitUser"

        # commit changes
        git add .
        git commit -m "Updating VERSION to $newVersion ***NO_CI***"
        git push origin HEAD:$($env:BUILD_SOURCEBRANCH)
        Pop-Location
      displayName: Update project version
