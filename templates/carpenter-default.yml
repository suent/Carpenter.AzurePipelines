#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:

  # See docs/parameters.md for parameter documentation.

- name: pipelineVersion
  type: number
  default: 1

- name: includePipeline
  type: boolean
  default: true

- name: pipelineReason
  type: string
  default: CI
  values:
  - CI
  - Prerelease
  - Release

- name: defaultPoolType
  type: string
  default: Hosted
  values:
  - Hosted
  - Private

- name: defaultPoolName
  type: string
  default: Default

- name: defaultPoolDemands
  type: object
  default: {}

- name: defaultPoolVMImage
  type: string
  default: 'ubuntu-latest'

- name: versionType
  type: string
  default: None
  values:
  - None
  - SemVer

- name: prereleaseLabel
  type: string
  default: alpha
  values:
  - alpha
  - beta
  - RC

- name: incrementVersionOnRelease
  type: boolean
  default: false

- name: buildDotNet
  type: boolean
  default: false

- name: executeUnitTests
  type: boolean
  default: false

- name: sonarCloud
  type: boolean
  default: false

- name: sonarCloudOrganization
  type: string
  default: ''

- name: sonarCloudProjectKey
  type: string
  default: ''

- name: sonarCloudServiceConnection
  type: string
  default: ''

- name: deployBranch
  type: string
  default: ''

- name: deployNuGet
  type: string
  default: ''

- name: nuGetTargetFeedDev
  type: string
  default: ''

- name: nuGetTargetFeedTest1
  type: string
  default: ''

- name: nuGetTargetFeedTest2
  type: string
  default: ''

- name: nuGetTargetFeedStage
  type: string
  default: ''

- name: nuGetTargetFeedProd
  type: string
  default: ''

- name: updateNuGetQuality
  type: string
  default: ''

- name: nuGetQualityFeed
  type: string
  default: ''

- name: nuGetQualityDev
  type: string
  default: ''

- name: nuGetQualityTest1
  type: string
  default: ''

- name: nuGetQualityTest2
  type: string
  default: ''

- name: nuGetQualityStage
  type: string
  default: ''

- name: nuGetQualityProd
  type: string
  default: ''

- name: gitHubServiceConnection
  type: string
  default: ''

- name: addGitTagOnDevMain
  type: boolean
  default: false

- name: addGitHubReleaseOnProd
  type: boolean
  default: false


stages:
- stage: dev
  displayName: Developer

  jobs:
  - job: initialize
    displayName: Initialize


    pool:
      ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
        vmImage: ${{ parameters.defaultPoolVMImage }}
      ${{ if eq(parameters.defaultPoolType,'Private') }}:
        name: ${{ parameters.defaultPoolName }}
        ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
          demands: ${{ parameters.defaultPoolDemands }}


    workspace:
      clean: all


    variables:
    - name: Carpenter.PipelineVersion
      value: ${{ parameters.pipelineVersion }}

    - ${{ if eq(parameters.includePipeline,'true') }}:
      - name: Carpenter.Pipeline
        value: true

      - name: Carpenter.Pipeline.Path
        value: $[ format('{0}/{1}/{2}', '$(Agent.BuildDirectory)', 's', 'Carpenter.AzurePipelines') ]

    - ${{ if ne(parameters.includePipeline,'true') }}:
      - name: Carpenter.Pipeline
        value: false

      - name: Carpenter.Pipeline.Path
        value: $[ format('{0}/{1}', '$(Agent.BuildDirectory)', 's') ]

    - name: Carpenter.Pipeline.ScriptPath
      value: $[ format('{0}/{1}', variables['Carpenter.Pipeline.Path'], 'scripts') ]

    - ${{ if eq(variables['Build.Reason'],'Manual') }}:
      - name: Carpenter.Pipeline.Reason
        value: ${{ parameters.pipelineReason }}

    - name: Carpenter.Pool.Default.Type
      value: ${{ parameters.defaultPoolType }}

    - ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
      - name: Carpenter.Pool.Default.VMImage
        value: ${{ parameters.defaultPoolVMImage}}

    - ${{ if eq(parameters.defaultPoolType,'Private') }}:
      - name: Carpenter.Pool.Default.Name
        value: ${{ parameters.defaultPoolName }}
  
      - ${{ if eq(length(parameters.defaultPoolDemands),0) }}:
        - name: Carpenter.Pool.Default.Demands
          value: False
  
      - ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
        - name: Carpenter.Pool.Default.Demands
          value: True

    - name: Carpenter.Version.Type
      value: ${{ parameters.versionType }}
  
    - ${{ if ne(parameters.versionType,'None') }}:
     
      - ${{ if or(eq(variables['Build.Reason'],'IndividualCI'), eq(variables['Build.Reason'],'BatchedCI'), and(eq(variables['Build.Reason'],'Manual'), eq(parameters['pipelineReason'],'CI'))) }}:
        - name: Carpenter.ContinuousIntegration.Date
          value: $[ format('{0:yyyyMMdd}', pipeline.startTime) ]

      - ${{ if eq(parameters['pipelineReason'],'Prerelease')}}:
        - name: Carpenter.Prerelease.Label
          value: ${{ parameters.prereleaseLabel }}

      - ${{ if eq(parameters['pipelineReason'],'Release')}}:
        - name: Carpenter.Version.IncrementOnRelease
          value: ${{ parameters.incrementVersionOnRelease }}
  
    - ${{ if eq(parameters.buildDotNet,true) }}:
      - name: Carpenter.Build.DotNet
        value: ${{ parameters.buildDotNet }}

    - name: Carpenter.Test.Unit
      value: ${{ parameters.executeUnitTests }}

    - name: Carpenter.SonarCloud
      value: ${{ parameters.sonarCloud }}

    - ${{ if eq(parameters.sonarCloud, 'true') }}:
      - name: Carpenter.SonarCloud.Organization
        value: ${{ parameters.sonarCloudOrganization }}

      - name: Carpenter.SonarCloud.ProjectKey
        value: ${{ parameters.sonarCloudProjectKey }}
     
      - name: Carpenter.SonarCloud.ServiceConnection
        value: ${{ parameters.sonarCloudServiceConnection }}

    - name: Carpenter.Deploy.Branch
      value: ${{ parameters.deployBranch }}

    - name: Carpenter.Deploy.NuGet
      value: ${{ parameters.deployNuGet }}

    - ${{ if contains(parameters.deployNuGet,'dev') }}:
      - name: Carpenter.Deploy.NuGet.TargetFeed.Dev
        value: ${{ parameters.nuGetTargetFeedDev }}

    - ${{ if contains(parameters.deployNuGet,'test1') }}:
      - name: Carpenter.Deploy.NuGet.TargetFeed.Test1
        value: ${{ parameters.nuGetTargetFeedTest1 }}

    - ${{ if contains(parameters.deployNuGet,'test2') }}:
      - name: Carpenter.Deploy.NuGet.TargetFeed.Test2
        value: ${{ parameters.nuGetTargetFeedTest2 }}

    - ${{ if contains(parameters.deployNuGet,'stage') }}:
      - name: Carpenter.Deploy.NuGet.TargetFeed.Stage
        value: ${{ parameters.nuGetTargetFeedStage }}

    - ${{ if contains(parameters.deployNuGet,'prod') }}:
      - name: Carpenter.Deploy.NuGet.TargetFeed.Prod
        value: ${{ parameters.nuGetTargetFeedProd }}

    - name: Carpenter.NuGet.Quality
      value: ${{ parameters.updateNuGetQuality }}
    
    - ${{ if ne(parameters.updateNuGetQuality,'') }}:
      - name: Carpenter.NuGet.Quality.Feed
        value: ${{ parameters.nuGetQualityFeed }}

    - ${{ if contains(parameters.updateNuGetQuality,'dev') }}:
      - name: Carpenter.NuGet.Quality.Dev
        value: ${{ parameters.nuGetQualityDev }}
 
    - ${{ if contains(parameters.updateNuGetQuality,'test1') }}:
      - name: Carpenter.NuGet.Quality.Test1
        value: ${{ parameters.nuGetQualityTest1 }}
 
    - ${{ if contains(parameters.updateNuGetQuality,'test2') }}:
      - name: Carpenter.NuGet.Quality.Test2
        value: ${{ parameters.nuGetQualityTest2 }}
 
    - ${{ if contains(parameters.updateNuGetQuality,'stage') }}:
      - name: Carpenter.NuGet.Quality.Stage
        value: ${{ parameters.nuGetQualityStage }}
 
    - ${{ if contains(parameters.updateNuGetQuality,'prod') }}:
      - name: Carpenter.NuGet.Quality.Prod
        value: ${{ parameters.nuGetQualityProd }}
 
    - ${{ if ne(parameters.gitHubServiceConnection,'') }}:
      - name: Carpenter.GitHub.ServiceConnection
        value: ${{ parameters.gitHubServiceConnection }}


    steps:
    - checkout: self
  
    # Publish source artifact
    - publish: $(System.DefaultWorkingDirectory)
      artifact: source
      displayName: 'Publish source artifact'

    # Include pipeline for access to pipeline scripts
    - ${{ if eq(parameters.includePipeline, 'true') }}:
      - checkout: Carpenter

    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Carpenter.Pipeline.ScriptPath)/InitializePipeline.ps1
        arguments: -Verbose
      displayName: Initialize pipeline
      name: initializePipeline

    - template: step/display-environment.yml


  - ${{ if eq(variables['Build.SourceBranch'],'refs/heads/main') }}:
    - template: ../job/deploy.yml
      parameters:
        pipelineVersion: ${{ parameters.pipelineVersion }}
        includePipeline: ${{ parameters.includePipeline }}
        pipelineReason: ${{ parameters.pipelineReason }}
        defaultPoolType: ${{ parameters.defaultPoolType }}
        defaultPoolName: ${{ parameters.defaultPoolName }}
        defaultPoolDemands: ${{ parameters.defaultPoolDemands }}
        defaultPoolVMImage: ${{ parameters.defaultPoolVMImage }}
        versionType: ${{ parameters.versionType }}
        incrementVersionOnRelease: ${{ parameters.incrementVersionOnRelease }}
        buildDotNet: ${{ parameters.buildDotNet }}
        executeUnitTests: ${{ parameters.executeUnitTests }}
        sonarCloud: ${{ parameters.sonarCloud }}
        deployBranch: ${{ parameters.deployBranch }}
        deployNuGet: ${{ parameters.deployNuGet }}
        nuGetTargetFeedDev: ${{ parameters.nuGetTargetFeedDev }}
        nuGetTargetFeedTest1: ${{ parameters.nuGetTargetFeedTest1 }}
        nuGetTargetFeedTest2: ${{ parameters.nuGetTargetFeedTest2 }}
        nuGetTargetFeedStage: ${{ parameters.nuGetTargetFeedStage }}
        nuGetTargetFeedProd: ${{ parameters.nuGetTargetFeedProd }}
        updateNuGetQuality: ${{ parameters.updateNuGetQuality }}
        nuGetQualityFeed: ${{ parameters.nuGetQualityFeed }}
        nuGetQualityDev: ${{ parameters.nuGetQualityDev }}
        nuGetQualityTest1: ${{ parameters.nuGetQualityTest1 }}
        nuGetQualityTest2: ${{ parameters.nuGetQualityTest2 }}
        nuGetQualityStage: ${{ parameters.nuGetQualityStage }}
        nuGetQualityProd: ${{ parameters.nuGetQualityProd }}
        gitHubServiceConnection: ${{ parameters.gitHubServiceConnection }}
        addGitTagOnDevMain: ${{ parameters.addGitTagOnDevMain }}
        addGitHubReleaseOnProd: ${{ parameters.addGitHubReleaseOnProd }}
        stack: dev

# Deploys to stacks only on changes to main branch
- ${{ if eq(variables['Build.SourceBranch'],'refs/heads/main') }}:

  - template: stage/stack.yml
    parameters:
      pipelineVersion: ${{ parameters.pipelineVersion }}
      includePipeline: ${{ parameters.includePipeline }}
      pipelineReason: ${{ parameters.pipelineReason }}
      defaultPoolType: ${{ parameters.defaultPoolType }}
      defaultPoolName: ${{ parameters.defaultPoolName }}
      defaultPoolDemands: ${{ parameters.defaultPoolDemands }}
      defaultPoolVMImage: ${{ parameters.defaultPoolVMImage }}
      versionType: ${{ parameters.versionType }}
      incrementVersionOnRelease: ${{ parameters.incrementVersionOnRelease }}
      buildDotNet: ${{ parameters.buildDotNet }}
      executeUnitTests: ${{ parameters.executeUnitTests }}
      sonarCloud: ${{ parameters.sonarCloud }}
      deployBranch: ${{ parameters.deployBranch }}
      deployNuGet: ${{ parameters.deployNuGet }}
      nuGetTargetFeedDev: ${{ parameters.nuGetTargetFeedDev }}
      nuGetTargetFeedTest1: ${{ parameters.nuGetTargetFeedTest1 }}
      nuGetTargetFeedTest2: ${{ parameters.nuGetTargetFeedTest2 }}
      nuGetTargetFeedStage: ${{ parameters.nuGetTargetFeedStage }}
      nuGetTargetFeedProd: ${{ parameters.nuGetTargetFeedProd }}
      updateNuGetQuality: ${{ parameters.updateNuGetQuality }}
      nuGetQualityFeed: ${{ parameters.nuGetQualityFeed }}
      nuGetQualityDev: ${{ parameters.nuGetQualityDev }}
      nuGetQualityTest1: ${{ parameters.nuGetQualityTest1 }}
      nuGetQualityTest2: ${{ parameters.nuGetQualityTest2 }}
      nuGetQualityStage: ${{ parameters.nuGetQualityStage }}
      nuGetQualityProd: ${{ parameters.nuGetQualityProd }}
      gitHubServiceConnection: ${{ parameters.gitHubServiceConnection }}
      addGitTagOnDevMain: ${{ parameters.addGitTagOnDevMain }}
      addGitHubReleaseOnProd: ${{ parameters.addGitHubReleaseOnProd }}
      stack: test1
      stackName: Test 1
      stackDependsOn:
      - dev

  - template: stage/stack.yml
    parameters:
      pipelineVersion: ${{ parameters.pipelineVersion }}
      includePipeline: ${{ parameters.includePipeline }}
      pipelineReason: ${{ parameters.pipelineReason }}
      defaultPoolType: ${{ parameters.defaultPoolType }}
      defaultPoolName: ${{ parameters.defaultPoolName }}
      defaultPoolDemands: ${{ parameters.defaultPoolDemands }}
      defaultPoolVMImage: ${{ parameters.defaultPoolVMImage }}
      versionType: ${{ parameters.versionType }}
      incrementVersionOnRelease: ${{ parameters.incrementVersionOnRelease }}
      buildDotNet: ${{ parameters.buildDotNet }}
      executeUnitTests: ${{ parameters.executeUnitTests }}
      sonarCloud: ${{ parameters.sonarCloud }}
      deployBranch: ${{ parameters.deployBranch }}
      deployNuGet: ${{ parameters.deployNuGet }}
      nuGetTargetFeedDev: ${{ parameters.nuGetTargetFeedDev }}
      nuGetTargetFeedTest1: ${{ parameters.nuGetTargetFeedTest1 }}
      nuGetTargetFeedTest2: ${{ parameters.nuGetTargetFeedTest2 }}
      nuGetTargetFeedStage: ${{ parameters.nuGetTargetFeedStage }}
      nuGetTargetFeedProd: ${{ parameters.nuGetTargetFeedProd }}
      updateNuGetQuality: ${{ parameters.updateNuGetQuality }}
      nuGetQualityFeed: ${{ parameters.nuGetQualityFeed }}
      nuGetQualityDev: ${{ parameters.nuGetQualityDev }}
      nuGetQualityTest1: ${{ parameters.nuGetQualityTest1 }}
      nuGetQualityTest2: ${{ parameters.nuGetQualityTest2 }}
      nuGetQualityStage: ${{ parameters.nuGetQualityStage }}
      nuGetQualityProd: ${{ parameters.nuGetQualityProd }}
      gitHubServiceConnection: ${{ parameters.gitHubServiceConnection }}
      addGitTagOnDevMain: ${{ parameters.addGitTagOnDevMain }}
      addGitHubReleaseOnProd: ${{ parameters.addGitHubReleaseOnProd }}
      stack: test2
      stackName: Test 2
      stackDependsOn:
      - dev

  - template: stage/stack.yml
    parameters:
      pipelineVersion: ${{ parameters.pipelineVersion }}
      includePipeline: ${{ parameters.includePipeline }}
      pipelineReason: ${{ parameters.pipelineReason }}
      defaultPoolType: ${{ parameters.defaultPoolType }}
      defaultPoolName: ${{ parameters.defaultPoolName }}
      defaultPoolDemands: ${{ parameters.defaultPoolDemands }}
      defaultPoolVMImage: ${{ parameters.defaultPoolVMImage }}
      versionType: ${{ parameters.versionType }}
      incrementVersionOnRelease: ${{ parameters.incrementVersionOnRelease }}
      buildDotNet: ${{ parameters.buildDotNet }}
      executeUnitTests: ${{ parameters.executeUnitTests }}
      sonarCloud: ${{ parameters.sonarCloud }}
      deployBranch: ${{ parameters.deployBranch }}
      deployNuGet: ${{ parameters.deployNuGet }}
      nuGetTargetFeedDev: ${{ parameters.nuGetTargetFeedDev }}
      nuGetTargetFeedTest1: ${{ parameters.nuGetTargetFeedTest1 }}
      nuGetTargetFeedTest2: ${{ parameters.nuGetTargetFeedTest2 }}
      nuGetTargetFeedStage: ${{ parameters.nuGetTargetFeedStage }}
      nuGetTargetFeedProd: ${{ parameters.nuGetTargetFeedProd }}
      updateNuGetQuality: ${{ parameters.updateNuGetQuality }}
      nuGetQualityFeed: ${{ parameters.nuGetQualityFeed }}
      nuGetQualityDev: ${{ parameters.nuGetQualityDev }}
      nuGetQualityTest1: ${{ parameters.nuGetQualityTest1 }}
      nuGetQualityTest2: ${{ parameters.nuGetQualityTest2 }}
      nuGetQualityStage: ${{ parameters.nuGetQualityStage }}
      nuGetQualityProd: ${{ parameters.nuGetQualityProd }}
      gitHubServiceConnection: ${{ parameters.gitHubServiceConnection }}
      addGitTagOnDevMain: ${{ parameters.addGitTagOnDevMain }}
      addGitHubReleaseOnProd: ${{ parameters.addGitHubReleaseOnProd }}
      stack: stage
      stackName: Staging
      stackDependsOn:
      - dev
      - test1
      - test2

  # Only deploy to productioni on Prerelease and Release builds
  - ${{ if and(eq(variables['Build.Reason'],'Manual'), or(eq(parameters.pipelineReason,'Prerelease'),eq(parameters.pipelineReason,'Release'))) }}:
    - template: stage/stack.yml
      parameters:
        pipelineVersion: ${{ parameters.pipelineVersion }}
        includePipeline: ${{ parameters.includePipeline }}
        pipelineReason: ${{ parameters.pipelineReason }}
        defaultPoolType: ${{ parameters.defaultPoolType }}
        defaultPoolName: ${{ parameters.defaultPoolName }}
        defaultPoolDemands: ${{ parameters.defaultPoolDemands }}
        defaultPoolVMImage: ${{ parameters.defaultPoolVMImage }}
        versionType: ${{ parameters.versionType }}
        incrementVersionOnRelease: ${{ parameters.incrementVersionOnRelease }}
        buildDotNet: ${{ parameters.buildDotNet }}
        executeUnitTests: ${{ parameters.executeUnitTests }}
        sonarCloud: ${{ parameters.sonarCloud }}
        deployBranch: ${{ parameters.deployBranch }}
        deployNuGet: ${{ parameters.deployNuGet }}
        nuGetTargetFeedDev: ${{ parameters.nuGetTargetFeedDev }}
        nuGetTargetFeedTest1: ${{ parameters.nuGetTargetFeedTest1 }}
        nuGetTargetFeedTest2: ${{ parameters.nuGetTargetFeedTest2 }}
        nuGetTargetFeedStage: ${{ parameters.nuGetTargetFeedStage }}
        nuGetTargetFeedProd: ${{ parameters.nuGetTargetFeedProd }}
        updateNuGetQuality: ${{ parameters.updateNuGetQuality }}
        nuGetQualityFeed: ${{ parameters.nuGetQualityFeed }}
        nuGetQualityDev: ${{ parameters.nuGetQualityDev }}
        nuGetQualityTest1: ${{ parameters.nuGetQualityTest1 }}
        nuGetQualityTest2: ${{ parameters.nuGetQualityTest2 }}
        nuGetQualityStage: ${{ parameters.nuGetQualityStage }}
        nuGetQualityProd: ${{ parameters.nuGetQualityProd }}
        gitHubServiceConnection: ${{ parameters.gitHubServiceConnection }}
        addGitTagOnDevMain: ${{ parameters.addGitTagOnDevMain }}
        addGitHubReleaseOnProd: ${{ parameters.addGitHubReleaseOnProd }}
        stack: prod
        stackName: Production
        stackDependsOn:
        - dev
        - stage
