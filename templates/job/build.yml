#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:

  # See docs/configuration.md for parameter documentation.

- name: pipelineVersion
  type: number

- name: pipelineOperations
  type: object

- name: pipelineReason
  type: string

- name: defaultPoolType
  type: string

- name: defaultPoolVMImage
  type: string

- name: defaultPoolName
  type: string

- name: defaultPoolDemands
  type: object

- name: sonarCloudServiceConnection
  type: string

- name: deployBranch
  type: string

- name: deployNuGet
  type: string

- name: updateNuGetQuality
  type: string

jobs:
- job: build
  displayName: Build

  dependsOn: initialize


  pool:
    ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
      vmImage: ${{ parameters.defaultPoolVMImage }}
    ${{ if eq(parameters.defaultPoolType,'Private') }}:
      name: ${{ parameters.defaultPoolName }}
      ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
        demands: ${{ parameters.defaultPoolDemands }}


  workspace:
    clean: all


  variables:
  - template: ../variable/carpenter-dev.yml
    parameters:
      pipelineOperations: ${{ parameters.pipelineOperations }}
      pipelineReason: ${{ parameters.pipelineReason }}
      defaultPoolType: ${{ parameters.defaultPoolType }}
      deployNuGet: ${{ parameters.deployNuGet }}
      updateNuGetQuality: ${{ parameters.updateNuGetQuality }}


  steps:
  - checkout: self

  # Include pipeline for access to pipeline scripts
  - ${{ if not(containsValue(parameters.pipelineOperations,'ExcludePipeline')) }}:
    - checkout: Carpenter

  - template: ../step/display-environment.yml

  - ${{ if containsValue(parameters.pipelineOperations, 'BuildDotNet') }}:

    - ${{ if containsValue(parameters.pipelineOperations, 'DeployNuGet') }}:
      - task: NuGetAuthenticate@0
        displayName: Setup NuGet authentication

    - task: UseDotNet@2
      displayName: 'Use .NET Core 6'
      condition: succeeded()
      inputs:
        packageType: sdk
        version: 6.x
        installationPath: $(Carpenter.DotNet.Path)

    - ${{ if containsValue(parameters.pipelineOperations, 'AnalyzeSonar') }}:
      - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
        displayName: 'Prepare SonarCloud analysis'
        condition: succeeded()
        inputs:
          SonarCloud: ${{ parameters.sonarCloudServiceConnection }}
          organization: $(Carpenter.SonarCloud.Organization)
          projectKey: $(Carpenter.SonarCloud.ProjectKey)
          projectVersion: '$(Build.BuildNumber)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths=$(Carpenter.Output.Tests.Path)/coverage.opencover.xml
            sonar.test.exclusions=**/coverage.*.xml
            sonar.cs.vstest.reportsPaths=$(Carpenter.Output.Tests.Path)/*.trx

    - task: DotNetCoreCLI@2
      displayName: 'Build dotnet'
      condition: succeeded()
      inputs:
        command: build
        projects: '$(Carpenter.Solution.Path)'
        arguments: '--output $(Carpenter.Output.Binaries.Path) --configuration Debug --version-suffix "$(Carpenter.Version.Label)" /p:VersionPrefix=$(Carpenter.Version.BaseVersion) /p:Version=$(Carpenter.Version) /p:AssemblyVersion=$(Carpenter.Version.Major).0.0.0 /p:FileVersion=$(Carpenter.Version.BaseVersion).$(Carpenter.Version.Revision) /p:InformationalVersion=$(Carpenter.Version) /p:PackageVersion=$(Carpenter.Version) /p:GeneratePackageOnBuild=true'

    - ${{ if containsValue(parameters.pipelineOperations, 'PackageNuGet') }}:
      - task: CopyFiles@2
        displayName: 'Copy NuGet.Config'
        condition: succeeded()
        inputs:
          cleanTargetFolder: true
          sourceFolder: $(Carpenter.Project.Path)
          contents: 'NuGet.Config'
          targetFolder: $(Carpenter.Output.NuGet.Path)

      - task: CopyFiles@2
        displayName: 'Copy nupkg to output'
        condition: succeeded()
        inputs:
          sourceFolder: $(Carpenter.Output.Binaries.Path)
          contents: '*.nupkg'
          targetFolder: $(Carpenter.Output.NuGet.Path)

      - task: DeleteFiles@1
        displayName: 'Remove nupkg from binaries'
        condition: succeeded()
        inputs:
          sourceFolder: $(Carpenter.Output.Binaries.Path)
          contents: '*.nupkg'
  
      - publish: '$(Carpenter.Output.NuGet.Path)'
        displayName: 'Publish nuget artifact'
        artifact: package.nuget
        condition: succeeded()

    - publish: '$(Carpenter.Output.Binaries.Path)'
      displayName: 'Publish binaries artifact'
      artifact: binaries
      condition: succeeded()

    - ${{ if containsValue(parameters.pipelineOperations, 'TestDotNet') }}:
      - task: DotNetCoreCLI@2
        displayName: 'Perform unit tests'
        condition: succeeded()
        inputs:
          command: test
          projects: '$(Carpenter.Solution.Path)'
          arguments: '--no-build --output $(Carpenter.Output.Binaries.Path) --filter Category=UnitTest --logger trx --results-directory $(Carpenter.Output.Tests.Path) --configuration Debug /p:CollectCoverage=true /p:CoverletOutput=$(Carpenter.Output.Tests.Path)/ /p:CoverletOutputFormat="cobertura%2copencover"'
          publishTestResults: false # manually publish later, we want trx results saved to specific location
          nobuild: true

      - task: PublishTestResults@2
        displayName: 'Publish unit test results'
        condition: succeeded()
        inputs:
          testResultsFormat: 'VSTest'
          testResultsFiles: $(Carpenter.Output.Tests.Path)/*.trx
          testRunTitle: '$(Carpenter.Project) L0 - Unit Tests'
          buildConfiguration: Debug
          buildPlatform: Any CPU
          publishRunAttachments: true
    
    - ${{ if containsValue(parameters.pipelineOperations, 'CollectTestCoverage') }}:
      - script: |
          dotnet tool install -g dotnet-reportgenerator-globaltool
          reportgenerator -reports:$(Carpenter.Output.Tests.Path)/coverage.cobertura.xml -targetdir:$(Carpenter.Output.TestCoverage.Path) "-reporttypes:Cobertura"
        displayName: Prepare code coverage
        condition: succeeded()
        continueOnError: true
    
      - task: PublishCodeCoverageResults@1
        displayName: 'Publish code coverage'
        condition: succeeded()
        continueOnError: true
        inputs:
          codeCoverageTool: Cobertura
          summaryFileLocation: '$(Carpenter.Output.TestCoverage.Path)/Cobertura.xml'

    - ${{ if containsValue(parameters.pipelineOperations, 'TestDotNet') }}:
      - publish: '$(Carpenter.Output.Tests.Path)'
        displayName: 'Publish tests-L0 artifact'
        artifact: tests-L0
        condition: succeeded()
        continueOnError: true

    - ${{ if containsValue(parameters.pipelineOperations, 'AnalyzeSonar') }}:
      - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
        displayName: 'Perform SonarCloud analysis'
        condition: succeeded()
    
      - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
        displayName: 'Publish SonarCloud analysis'
        condition: succeeded()
