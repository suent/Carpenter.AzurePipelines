#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:
  # See template/carpenter-default.yml
- name: pipelineVersion
  type: number

  # See template/carpenter-default.yml
- name: includePipeline
  type: boolean

  # See template/carpenter-default.yml
- name: buildType
  type: string

  # See template/carpenter-default.yml
- name: project
  type: string

  # See template/carpenter-default.yml
- name: defaultPoolType
  type: string
  default: Hosted
  values:
  - Hosted
  - Private

  # See template/carpenter-default.yml
- name: defaultPoolName
  type: string
  default: Default

  # See template/carpenter-default.yml
- name: defaultPoolDemands
  type: object
  default: {}

  # See template/carpenter-default.yml
- name: defaultPoolVMImage
  type: string
  default: 'ubuntu-latest'
    
  # See template/carpenter-default.yml
- name: versionType
  type: string

  # See template/carpenter-default.yml
- name: versionFile
  type: string

  # See template/carpenter-default.yml
- name: revisionOffset
  type: string

  # See template/carpenter-default.yml
- name: prereleaseLabel
  type: string

  # See template/carpenter-default.yml
- name: incrementVersionOnRelease
  type: boolean

  # See template/carpenter-default.yml
- name: buildDotNet
  type: boolean

  # See template/carpenter-default.yml
- name: sonarCloud
  type: boolean
  default: false

  # See template/carpenter-default.yml
- name: sonarCloudOrganization
  type: string

  # See template/carpenter-default.yml
- name: sonarCloudProjectKey
  type: string

  # See template/carpenter-default.yml
- name: sonarCloudServiceConnection
  type: string


jobs:
- job: build
  displayName: Build

  #dependsOn:
  #- initializePipeline
  #- finalizePipeline

  pool:
    ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
      vmImage: ${{ parameters.defaultPoolVMImage }}
    ${{ if eq(parameters.defaultPoolType,'Private') }}:
      name: ${{ parameters.defaultPoolName }}
      ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
        demands: ${{ parameters.defaultPoolDemands }}


  workspace:
    clean: all


  variables:
  - name: Carpenter.PipelineVersion
    value: ${{ parameters.pipelineVersion }}

  - ${{ if eq(parameters.includePipeline,'true') }}:
    - name: Carpenter.Pipeline
      value: true
    - name: Carpenter.Pipeline.Path
      value: s/carpenter-azure-pipelines
    - name: Carpenter.Project.Path
      value: $[ format('{0}/{1}', 's', variables['Build.DefinitionName']) ]
  - ${{ if ne(parameters.includePipeline,'true') }}:
    - name: Carpenter.Pipeline
      value: false
    - name: Carpenter.Pipeline.Path
      value: s
    - name: Carpenter.Project.Path
      value: s

  - name: Carpenter.Pipeline.ScriptPath
    value: $[ format('{0}/{1}/{2}', '$(Agent.BuildDirectory)', variables['Carpenter.Pipeline.Path'], 'scripts') ]

  - ${{ if eq(variables['Build.Reason'],'Manual') }}:
    - name: Carpenter.Build.Type
      value: ${{ parameters.buildType }}

  - name: Carpenter.Project
    value: ${{ parameters.project }}

  - name: Carpenter.Pool.Default.Type
    value: ${{ parameters.defaultPoolType }}

  - ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
    - name: Carpenter.Pool.Default.VMImage
      value: ${{ parameters.defaultPoolVMImage}}

  - ${{ if eq(parameters.defaultPoolType,'Private') }}:
    - name: Carpenter.Pool.Default.Name
      value: ${{ parameters.defaultPoolName }}
  
    - ${{ if eq(length(parameters.defaultPoolDemands),0) }}:
      - name: Carpenter.Pool.Default.Demands
        value: False
  
    - ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
      - name: Carpenter.Pool.Default.Demands
        value: True

  - name: Carpenter.Version.Type
    value: ${{ parameters.versionType }}
  
  - ${{ if ne(parameters.versionType,'None') }}:

    - name: Carpenter.Version.VersionFile
      value: ${{ parameters.versionFile }}

    - name: Carpenter.Version.RevisionOffset
      value: ${{ parameters.revisionOffset }}

    - ${{ if or(eq(variables['Build.Reason'],'IndividualCI'), eq(variables['Build.Reason'],'BatchedCI'), and(eq(variables['Build.Reason'],'Manual'), eq(parameters['buildType'],'CI'))) }}:
      - name: Carpenter.ContinuousIntegration.Date
        value: $[ format('{0:yyyyMMdd}', pipeline.startTime) ]

    - ${{ if eq(parameters['buildType'],'Prerelease')}}:
      - name: Carpenter.Prerelease.Label
        value: ${{ parameters.prereleaseLabel }}

    - ${{ if eq(parameters['buildType'],'Release')}}:
      - name: Carpenter.Version.IncrementOnRelease
        value: ${{ parameters.incrementVersionOnRelease }}

  - name: Carpenter.SonarCloud
    value: ${{ parameters.sonarCloud }}

  - ${{ if eq(parameters.sonarCloud, 'true') }}:
    - name: Carpenter.SonarCloud.Organization
      value: ${{ parameters.sonarCloudOrganization }}

    - name: Carpenter.SonarCloud.ProjectKey
      value: ${{ parameters.sonarCloudProjectKey }}
     
    - name: Carpenter.SonarCloud.ServiceConnection
      value: ${{ parameters.sonarCloudServiceConnection }}


  steps:
  - checkout: self
  
  # Publish source artifact
  - publish: $(System.DefaultWorkingDirectory)
    artifact: source
    displayName: 'Publish artifact: source'

  # Include pipeline for access to pipeline scripts
  - ${{ if eq(parameters.includePipeline, 'true') }}:
    - checkout: Carpenter
      persistCredentials: true

  - template: ../step/display-environment.yml

  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: $(Carpenter.Pipeline.ScriptPath)/ValidatePipeline.ps1
      arguments: -Verbose
    displayName: Validate pipeline

  - task: PowerShell@2
    inputs:
      targetType: 'filePath'
      filePath: $(Carpenter.Pipeline.ScriptPath)/InitializePipeline.ps1
      arguments: -Verbose
    displayName: Initialize pipeline
    name: initializePipeline

  - ${{ if ne(parameters.versionType,'None') }}:
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Carpenter.Pipeline.ScriptPath)/InitializeBuildVersion.ps1
        arguments: -Verbose
      displayName: Initialize versioning
      name: initializeBuildVersion

  - ${{ if eq(parameters.buildDotNet, 'true') }}:

    - task: UseDotNet@2
      displayName: 'Use .NET Core sdk'
      condition: succeeded()
      inputs:
        packageType: sdk
        version: 6.x
        installationPath: $(Agent.ToolsDirectory)/dotnet

    - ${{ if eq(parameters.sonarCloud, 'true') }}:
      - task: SonarSource.sonarcloud.14d9cde6-c1da-4d55-aa01-2965cd301255.SonarCloudPrepare@1
        displayName: 'Prepare analysis: SonarCloud'
        condition: succeeded()
        inputs:
          SonarCloud: ${{ parameters.sonarCloudServiceConnection }}
          organization: $(Carpenter.SonarCloud.Organization)
          projectKey: $(Carpenter.SonarCloud.ProjectKey)
          projectVersion: '$(Build.BuildNumber)'
          extraProperties: |
            sonar.cs.opencover.reportsPaths=$(System.DefaultWorkingDirectory)/out/tests/coverage.opencover.xml
            sonar.test.exclusions=**/coverage.*.xml
            sonar.cs.vstest.reportsPaths=$(System.DefaultWorkingDirectory)/out/tests/*.trx      

    - task: DotNetCoreCLI@2
      displayName: 'Build: dotnet'
      condition: succeeded()
      inputs:
        command: build
        projects: '$(Agent.BuildDirectory)/$(Carpenter.Project.Path)/$(Carpenter.Project).sln'
        arguments: '--output $(System.DefaultWorkingDirectory)/out/bin --configuration Debug --version-suffix "$(Carpenter.Version.Label)" /p:VersionPrefix=$(Carpenter.Version.BaseVersion) /p:Version=$(Carpenter.Version) /p:AssemblyVersion=$(Carpenter.Version.Major).0.0.0 /p:FileVersion=$(Carpenter.Version.BaseVersion).$(Carpenter.Version.Revision) /p:InformationalVersion=$(Carpenter.Version) /p:PackageVersion=$(Carpenter.Version) /p:GeneratePackageOnBuild=true'

    - task: CopyFiles@2
      displayName: 'Copy files: nupkg'
      condition: succeeded()
      inputs:
        cleanTargetFolder: true
        sourceFolder: $(System.DefaultWorkingDirectory)/out/bin
        contents: '*.nupkg'
        targetFolder: $(System.DefaultWorkingDirectory)/out/nuget

    - task: DeleteFiles@1
      displayName: 'Remove files: nupkg'
      condition: succeeded()
      inputs:
        sourceFolder: $(System.DefaultWorkingDirectory)/out/bin
        contents: '*.nupkg'

    - publish: '$(System.DefaultWorkingDirectory)/out/bin'
      displayName: 'Publish artifact: binaries'
      artifact: binaries
      condition: succeeded()

    - publish: '$(System.DefaultWorkingDirectory)/out/nuget'
      displayName: 'Publish artifact: nuget'
      artifact: package.nuget
      condition: succeeded()

    - task: DotNetCoreCLI@2
      displayName: 'Test: L0 unit tests'
      condition: succeeded()
      inputs:
        command: test
        projects: '$(Agent.BuildDirectory)/$(Carpenter.Project.Path)/$(Carpenter.Project).sln'
        arguments: '--output $(System.DefaultWorkingDirectory)/out/bin --filter Category=UnitTest --logger trx --results-directory $(System.DefaultWorkingDirectory)/out/tests --configuration Debug /p:CollectCoverage=true /p:CoverletOutput=$(System.DefaultWorkingDirectory)/out/tests/ /p:CoverletOutputFormat="cobertura%2copencover"'
        publishTestResults: false # manually publish later, we want trx results saved to specific location
        nobuild: true

    - task: PublishTestResults@2
      displayName: 'Publish results: L0'
      condition: succeeded()
      inputs:
        testResultsFormat: 'VSTest'
        testResultsFiles: $(System.DefaultWorkingDirectory)/out/tests/*.trx
        testRunTitle: '$(Carpenter.Project) L0 - Unit Tests'
        buildConfiguration: Debug
        buildPlatform: Any CPU
        publishRunAttachments: true
    
    - script: |
        dotnet tool install -g dotnet-reportgenerator-globaltool
        reportgenerator -reports:$(System.DefaultWorkingDirectory)/out/tests/coverage.cobertura.xml -targetdir:$(System.DefaultWorkingDirectory)/out/testCoverage "-reporttypes:Cobertura"
      displayName: Prepare code coverage
      condition: succeeded()
      continueOnError: true
    
    - task: PublishCodeCoverageResults@1
      displayName: 'Publish code coverage'
      condition: succeeded()
      continueOnError: true
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: '$(System.DefaultWorkingDirectory)/out/testCoverage/Cobertura.xml'

    - publish: '$(System.DefaultWorkingDirectory)/out/tests'
      displayName: 'Publish artifact: testOutput'
      artifact: testOutput
      condition: succeeded()
      continueOnError: true

    - ${{ if eq(parameters.sonarCloud, 'true') }}:
      - task: SonarSource.sonarcloud.ce096e50-6155-4de8-8800-4221aaeed4a1.SonarCloudAnalyze@1
        displayName: 'Analyze: SonarCloud'
        condition: succeeded()
    
      - task: SonarSource.sonarcloud.38b27399-a642-40af-bb7d-9971f69712e8.SonarCloudPublish@1
        displayName: 'Publish analysis: SonarCloud'
        condition: succeeded()
  
  - ${{ if and(ne(parameters.versionType, 'None'), eq(parameters.buildType, 'Release'), eq(parameters.incrementVersionOnRelease, 'true')) }}:
    - task: PowerShell@2
      inputs:
        targetType: 'filePath'
        filePath: $(Carpenter.Pipeline.ScriptPath)/IncrementVersion.ps1
        arguments: -Verbose
      displayName: Update project version
      env:
        CARPENTER_PIPELINEBOT_TOKENSECRET: $(PipelineBot-GitHub-PAT)
