#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:

  # See docs/parameters.md for parameter documentation.

- name: pipelineVersion
  type: number

- name: buildPurpose
  type: string

- name: defaultPoolType
  type: string

- name: versionType
  type: string

- name: buildDotNet
  type: string

- name: sonarCloud
  type: string

- name: deployNuGet
  type: string

- name: stack
  type: string

- name: jobDependsOn
  type: object
  default: {}


jobs:

- job: 'deploy_nuget_${{ parameters.stack }}'
  displayName: 'Deploy NuGet: ${{ parameters.stack }}'
  

  ${{ if ne(parameters.jobDependsOn,'') }}:
    dependsOn: ${{ parameters.jobDependsOn }}


  pool:
    vmImage: windows-2022


  workspace:
    clean: all


  variables:
  # Clear proxy variables because this task runs on Hosted Windows agent
  - name: http_proxy
    value: ''

  - name: https_proxy
    value: ''

  - name: NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS
    value: 30
  
  - name: NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS
    value: 30

  - ${{ if eq(parameters.stack,'dev') }}:
    - template: ../variable/carpenter-dev.yml
      parameters:
        buildPurpose: ${{ parameters.buildPurpose }}
        defaultPoolType: ${{ parameters.defaultPoolType }}
        versionType: ${{ parameters.versionType }}
        sonarCloud: ${{ parameters.sonarCloud }}
        deployNuGet: ${{ parameters.deployNuGet }}


  steps:
  # No sources are necessary
  - checkout: none

  # Download the nuget package created by the build job
  - download: current
    artifact: package.nuget
    displayName: 'Download artifact: package.nuget'

  - template: ../step/display-environment.yml

  - task: NuGetAuthenticate@0
    displayName: Setup NuGet authentication

  - ${{ if eq(parameters.buildDotNet,'true') }}:
    - task: UseDotNet@2
      displayName: 'Use .NET Core'
      condition: succeeded()
      inputs:
        packageType: sdk
        version: 6.x
        installationPath: $(Carpenter.DotNet.Path)

    - powershell: |
        $stacks = $env:CARPENTER_DEPLOY_NUGET -Split ","
        $targetFeed = ''
        $apiKey = ''
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_DEV
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_TEST1
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_TEST2
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_STABLE
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_PRODUS
        }
        if ($targetFeed -eq "AzureArtifacts") {
          $apiKey = "AzureArtifacts"
        } elseif ($targetFeed -eq "github.com") {
          $apiKey = $(NuGet-PAT)
        }
        Write-Host "Stacks: $stacks"
        Write-Host "TargetFeed: $targetFeed"
        Write-Host "ApiKey: $apiKey"
        dotnet nuget push --api-key $apiKey --source $targetFeed "$(Agent.BuildDirectory)\package.nuget\*.nupkg"
      displayName: 'Publish package: NuGet (${{ parameters.stack }})'

  - ${{ if ne(parameters.buildDotNet,'true') }}:
    - task: NuGetToolInstaller@1 # Optional if nuget.exe >= 4.8.5385 is already on the path
      inputs:
        versionSpec: '*'
        checkLatest: true
      displayName: Use NuGet Tool

    - powershell: |
        $stacks = $env:CARPENTER_DEPLOY_NUGET -Split ","
        $targetFeed = ''
        $apiKey = ''
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_DEV
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_TEST1
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_TEST2
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_STABLE
        }
        if ($stacks -Contains "dev") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_PRODUS
        }
        if ($targetFeed -eq "AzureArtifacts") {
          $apiKey = "AzureArtifacts"
        } elseif ($targetFeed -eq "github.com") {
          $apiKey = $(NuGet-PAT)
        }
        nuget push -ApiKey $apiKey -Source $targetFeed "$(Agent.BuildDirectory)\package.nuget\*.nupkg"
      displayName: 'Publish package: NuGet (${{ parameters.stack }})'
