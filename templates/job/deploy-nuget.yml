#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:

  # See docs/configuration.md for parameter documentation.

- name: pipelineVersion
  type: number

- name: pipelineOperations
  type: object

- name: pipelineReason
  type: string

- name: defaultPoolType
  type: string

- name: defaultPoolVMImage
  type: string

- name: defaultPoolName
  type: string

- name: defaultPoolDemands
  type: object

- name: deployNuGet
  type: string

- name: updateNuGetQuality
  type: string
  
- name: gitHubServiceConnection
  type: string

- name: stack
  type: string

- name: jobDependsOn
  type: object
  default: ''


jobs:

- job: 'deploy_nuget_${{ parameters.stack }}'
  displayName: 'Deploy NuGet'
  

  ${{ if ne(parameters.jobDependsOn,'') }}:
    dependsOn: ${{ parameters.jobDependsOn }}


  pool:
    ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
      vmImage: ${{ parameters.defaultPoolVMImage }}
    ${{ if eq(parameters.defaultPoolType,'Private') }}:
      name: ${{ parameters.defaultPoolName }}
      ${{ if gt(length(parameters.defaultPoolDemands),0) }}:
        demands: ${{ parameters.defaultPoolDemands }}


  workspace:
    clean: all


  variables:
  # Clear proxy variables because this task runs on Hosted Windows agent
  - name: http_proxy
    value: ''

  - name: https_proxy
    value: ''

  - name: NUGET.PLUGIN.HANDSHAKE.TIMEOUT.IN.SECONDS
    value: 30
  
  - name: NUGET.PLUGIN.REQUEST.TIMEOUT.IN.SECONDS
    value: 30

  - name: Carpenter.Stack
    value: ${{ parameters.stack }}

  - ${{ if eq(parameters.stack,'dev') }}:
    - template: ../variable/carpenter-dev.yml
      parameters:
        pipelineOperations: ${{ parameters.pipelineOperations }}
        pipelineReason: ${{ parameters.pipelineReason }}
        defaultPoolType: ${{ parameters.defaultPoolType }}
        updateNuGetQuality: ${{ parameters.updateNuGetQuality }}


  steps:
  # No sources are necessary
  - checkout: none

  # Download the nuget package created by the build job
  - download: current
    artifact: package.nuget
    displayName: 'Download artifact: package.nuget'

  - template: ../step/display-environment.yml

  - task: NuGetAuthenticate@0
    displayName: Setup NuGet authentication


  - task: CopyFiles@2 # Copy NuGet.Config to a spot it will be picked up
    displayName: 'Copy files: NuGet.Config'
    condition: succeeded()
    inputs:
      sourceFolder: $(Agent.BuildDirectory)/package.nuget
      contents: 'NuGet.Config'
      targetFolder: $(Agent.BuildDirectory)

  - ${{ if containsValue(parameters.pipelineOperations, 'BuildDotNet') }}:
    - task: UseDotNet@2
      displayName: 'Use .NET Core'
      condition: succeeded()
      inputs:
        packageType: sdk
        version: 6.x
        installationPath: $(Carpenter.DotNet.Path)

    - powershell: |
        $stacks = $env:CARPENTER_DEPLOY_NUGET -Split ","
        $targetFeed = ''
        $apiKey = ''
        if ([string]($stacks -like "dev") -eq "$env:CARPENTER_STACK") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_DEV
        }
        if ([string]($stacks -like "test1") -eq "$env:CARPENTER_STACK") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_TEST1
        }
        if ([string]($stacks -like "test2") -eq "$env:CARPENTER_STACK") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_TEST2
        }
        if ([string]($stacks -like "stage") -eq "$env:CARPENTER_STACK") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_STAGE
        }
        if ([string]($stacks -like "prod") -eq "$env:CARPENTER_STACK") {
          $targetFeed = $env:CARPENTER_DEPLOY_NUGET_TARGETFEED_PROD
        }
        Write-Host "TargetFeed: $targetFeed"
        if ($targetFeed -eq "AzureArtifacts") {
          $apiKey = "AzureArtifacts"
        } elseif ($targetFeed -eq "github.com") {
          $apiKey = '$(PipelineBot-GitHub-PAT)'
        } elseif ($targetFeed -eq "nuget.org") {
          $apiKey = '$(PipelineBot-NuGet-PAT)'
        }
        dotnet nuget push --skip-duplicate --api-key $apiKey --source $targetFeed "$(Agent.BuildDirectory)/package.nuget/*.nupkg"
      workingDirectory: $(Agent.BuildDirectory)
      displayName: 'Publish package: NuGet (${{ parameters.stack }})'
