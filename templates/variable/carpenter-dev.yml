#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:

  # See docs/parameters.md for parameter documentation.

- name: defaultPoolType
  type: string

- name: pipelineReason
  type: string

- name: versionType
  type: string

- name: buildDotNet
  type: boolean

- name: executeUnitTests
  type: boolean
  
- name: sonarCloud
  type: string

- name: deployNuGet
  type: string

- name: updateNuGetQuality
  type: string


variables:
- name: Carpenter.Pipeline.Version
  value: $[ dependencies.initialize.outputs['initializePipeline.pipelineVersion'] ]

- name: Carpenter.Pipeline.Operations
  value: $[ dependencies.initialize.outputs['initializePipeline.pipelineOperations'] ]

- name: Carpenter.Pipeline.Path
  value: $[ dependencies.initialize.outputs['initializePipeline.pipelinePath'] ]

- name: Carpenter.Pipeline.ScriptPath
  value: $[ dependencies.initialize.outputs['initializePipeline.pipelineScriptPath'] ]

- name: Carpenter.Pipeline.Reason
  value: $[ dependencies.initialize.outputs['initializePipeline.pipelineReason'] ]

- name: Carpenter.Project
  value: $[ dependencies.initialize.outputs['initializePipeline.project'] ]

- name: Carpenter.Project.Path
  value: $[ dependencies.initialize.outputs['initializePipeline.projectPath'] ]

- ${{ if eq(parameters.buildDotNet,true) }}:
  - name: Carpenter.DotNet.Path
    value: $[ dependencies.initialize.outputs['initializePipeline.dotNetPath'] ]
  
  - name: Carpenter.Solution.Path
    value: $[ dependencies.initialize.outputs['initializePipeline.solutionPath'] ]

  - name: Carpenter.Output.Path
    value: $[ dependencies.initialize.outputs['initializePipeline.outputPath'] ]

  - name: Carpenter.Output.Binaries.Path
    value: $[ dependencies.initialize.outputs['initializePipeline.binariesPath'] ]

  - name: Carpenter.Output.NuGet.Path
    value: $[ dependencies.initialize.outputs['initializePipeline.nuGetPath'] ]

  - ${{ if eq(parameters.executeUnitTests,true) }}:
    - name: Carpenter.Output.Tests.Path
      value: $[ dependencies.initialize.outputs['initializePipeline.testsPath'] ]

    - name: Carpenter.Output.TestCoverage.Path
      value: $[ dependencies.initialize.outputs['initializePipeline.testCoveragePath'] ]



- name: Carpenter.Pool.Default.Type
  value: $[ dependencies.initialize.outputs['initializePipeline.defaultPoolType'] ]

- ${{ if eq(parameters.defaultPoolType,'Hosted') }}:
  - name: Carpenter.Pool.Default.VMImage
    value:  $[ dependencies.initialize.outputs['initializePipeline.defaultPoolVMImage'] ]

- ${{ if eq(parameters.defaultPoolType,'Private') }}:
  - name: Carpenter.Pool.Default.Name
    value: $[ dependencies.initialize.outputs['initializePipeline.defaultPoolName'] ]
  
  - name: Carpenter.Pool.Default.Demands
    value: $[ dependencies.initialize.outputs['initializePipeline.defaultPoolDemands'] ]

- ${{ if eq(parameters.buildDotNet,true) }}:
  - name: Carpenter.Build.DotNet
    value: $[ dependencies.initialize.outputs['initializePipeline.buildDotNet'] ]

  - ${{ if eq(parameters.executeUnitTests,true) }}:
    - name: Carpenter.Test.Unit
      value: $[ dependencies.initialize.outputs['initializePipeline.executeUnitTests'] ]

- name: Carpenter.SonarCloud
  value: $[ dependencies.initialize.outputs['initializePipeline.sonarCloud'] ]

- ${{ if eq(parameters.sonarCloud, 'true') }}:
  - name: Carpenter.SonarCloud.Organization
    value: $[ dependencies.initialize.outputs['initializePipeline.sonarCloudOrganization'] ]

  - name: Carpenter.SonarCloud.ProjectKey
    value: $[ dependencies.initialize.outputs['initializePipeline.sonarCloudProjectKey'] ]
     
  - name: Carpenter.SonarCloud.ServiceConnection
    value: $[ dependencies.initialize.outputs['initializePipeline.sonarCloudServiceConnection'] ]

- name: Carpenter.Deploy.Branch
  value: $[ dependencies.initialize.outputs['initializePipeline.deployBranch'] ]

- name: Carpenter.Deploy.NuGet
  value: $[ dependencies.initialize.outputs['initializePipeline.deployNuGet'] ]

- ${{ if contains(parameters.deployNuGet,'dev') }}:
  - name: Carpenter.Deploy.NuGet.TargetFeed.Dev
    value: $[ dependencies.initialize.outputs['initializePipeline.nuGetTargetFeedDev'] ]

- ${{ if contains(parameters.deployNuGet,'test1') }}:
  - name: Carpenter.Deploy.NuGet.TargetFeed.Test1
    value: $[ dependencies.initialize.outputs['initializePipeline.nuGetTargetFeedTest1'] ]

- ${{ if contains(parameters.deployNuGet,'test2') }}:
  - name: Carpenter.Deploy.NuGet.TargetFeed.Test2
    value: $[ dependencies.initialize.outputs['initializePipeline.nuGetTargetFeedTest2'] ]

- ${{ if contains(parameters.deployNuGet,'stage') }}:
  - name: Carpenter.Deploy.NuGet.TargetFeed.Stage
    value: $[ dependencies.initialize.outputs['initializePipeline.nuGetTargetFeedStage'] ]

- ${{ if contains(parameters.deployNuGet,'prod') }}:
  - name: Carpenter.Deploy.NuGet.TargetFeed.Prod
    value: $[ dependencies.initialize.outputs['initializePipeline.nuGetTargetFeedProd'] ]

  - name: Carpenter.NuGet.Quality
    value: $[ dependencies.initialize.outputs['initializePipeline.updateNuGetQuality'] ]
  
  - ${{ if ne(parameters.updateNuGetQuality,'') }}:
    - name: Carpenter.NuGet.Quality.Feed
      value: $[ dependencies.initialize.outputs['initializePipeline.nuGetQualityFeed'] ]

  - ${{ if contains(parameters.updateNuGetQuality,'dev') }}:
    - name: Carpenter.NuGet.Quality.Dev
      value: $[ dependencies.initialize.outputs['initializePipeline.nuGetQualityDev'] ]
 
  - ${{ if contains(parameters.updateNuGetQuality,'test1') }}:
    - name: Carpenter.NuGet.Quality.Test1
      value: $[ dependencies.initialize.outputs['initializePipeline.nuGetQualityTest1'] ]
 
  - ${{ if contains(parameters.updateNuGetQuality,'test2') }}:
    - name: Carpenter.NuGet.Quality.Test2
      value: $[ dependencies.initialize.outputs['initializePipeline.nuGetQualityTest2'] ]
 
  - ${{ if contains(parameters.updateNuGetQuality,'stage') }}:
    - name: Carpenter.NuGet.Quality.Stage
      value: $[ dependencies.initialize.outputs['initializePipeline.nuGetQualityStage'] ]
 
  - ${{ if contains(parameters.updateNuGetQuality,'prod') }}:
    - name: Carpenter.NuGet.Quality.Prod
      value: $[ dependencies.initialize.outputs['initializePipeline.nuGetQualityProd'] ]
 
- name: Carpenter.GitHub.ServiceConnection
  value: $[ dependencies.initialize.outputs['initializePipeline.gitHubServiceConnection'] ]


- name: Carpenter.Version.Type
  value: $[ dependencies.initialize.outputs['initializePipeline.versionType'] ]

- ${{ if ne(parameters.versionType,'None') }}:

  - name: Carpenter.Version.VersionFile
    value:  $[ dependencies.initialize.outputs['initializePipeline.versionFile'] ]

  - name: Carpenter.Version.VersionFile.Path
    value:  $[ dependencies.initialize.outputs['initializePipeline.versionFilePath'] ]

  - name: Carpenter.Version.RevisionOffset
    value:  $[ dependencies.initialize.outputs['initializePipeline.revisionOffset'] ]

  - name: Carpenter.Version.BaseVersion
    value: $[ dependencies.initialize.outputs['initializePipeline.baseVersion'] ]

  - name: Carpenter.Version.Major
    value: $[ dependencies.initialize.outputs['initializePipeline.majorVersion'] ]

  - name: Carpenter.Version.Minor
    value: $[ dependencies.initialize.outputs['initializePipeline.minorVersion'] ]

  - name: Carpenter.Version.Patch
    value: $[ dependencies.initialize.outputs['initializePipeline.patchVersion'] ]

  - name: Carpenter.Version.Revision
    value:  $[ dependencies.initialize.outputs['initializePipeline.revision'] ]

  - ${{ if or(eq(variables['Build.Reason'],'IndividualCI'), eq(variables['Build.Reason'],'BatchedCI'), and(eq(variables['Build.Reason'],'Manual'), eq(parameters['pipelineReason'],'CI'))) }}:
    - name: Carpenter.ContinuousIntegration.Date
      value: $[ dependencies.initialize.outputs['initializePipeline.continuousIntegrationDate'] ]

    - name: Carpenter.ContinuousIntegration.Revision
      value: $[ dependencies.initialize.outputs['initializePipeline.continuousIntegrationRevision'] ]

  - ${{ if eq(variables['Build.Reason'],'PullRequest') }}:
    - name: Carpenter.PullRequest.Revision
      value: $[ dependencies.initialize.outputs['initializePipeline.pullRequestRevision'] ]

  - ${{ if eq(parameters['pipelineReason'],'Prerelease')}}:
    - name: Carpenter.Prerelease.Label
      value: $[ dependencies.initialize.outputs['initializePipeline.prereleaseLabel'] ]
  
    - name: Carpenter.Prerelease.Revision
      value: $[ dependencies.initialize.outputs['initializePipeline.prereleaseRevision'] ]

  - ${{ if eq(parameters['pipelineReason'],'Release')}}:
    - name: Carpenter.Version.IncrementOnRelease
      value: $[ dependencies.initialize.outputs['initializePipeline.incrementVersionOnRelease'] ]

  - name: Carpenter.Version.Label
    value: $[ dependencies.initialize.outputs['initializePipeline.versionLabel'] ]

  - name: Carpenter.Version
    value: $[ dependencies.initialize.outputs['initializePipeline.version'] ]
