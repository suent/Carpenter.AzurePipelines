#    Carpenter.AzurePipelines
#
#    Common YAML templates and scripts for Azure Pipelines definitions.
#
#
#    Copyright © 2015-2022 Suent Networks, All rights reserved.
#
#    Permission is hereby granted, free of charge, to any person obtaining a copy
#    of this software and associated documentation files (the "Software"), to deal
#    in the Software without restriction, including without limitation the rights
#    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
#    copies of the Software, and to permit persons to whom the Software is
#    furnished to do so, subject to the following conditions:
#
#    The above copyright notice and this permission notice shall be included in all
#    copies or substantial portions of the Software.
#
#    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
#    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
#    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
#    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
#    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
#    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
#    SOFTWARE.

# SPDX-License-Identifier: MIT


parameters:
  # See template/carpenter-default.yml
- name: buildType
  type: string

  # See template/carpenter-default.yml
- name: versionType
  type: string
  
    
variables:

- name: Carpenter.Version.Type
  value: $[ dependencies.build.outputs['initializePipeline.versionType'] ]

- ${{ if ne(parameters.versionType,'None') }}:

  - name: Carpenter.Version.VersionFile
    value:  $[ dependencies.build.outputs['initializeBuildVersion.versionFile'] ]

  - name: Carpenter.Version.VersionFilePath
    value:  $[ dependencies.build.outputs['initializeBuildVersion.versionFilePath'] ]

  - name: Carpenter.Version.RevisionOffset
    value:  $[ dependencies.build.outputs['initializeBuildVersion.revisionOffset'] ]

  - name: Carpenter.Version.BaseVersion
    value: $[ dependencies.build.outputs['initializeBuildVersion.baseVersion'] ]

  - name: Carpenter.Version.Major
    value: $[ dependencies.build.outputs['initializeBuildVersion.majorVersion'] ]

  - name: Carpenter.Version.Minor
    value: $[ dependencies.build.outputs['initializeBuildVersion.minorVersion'] ]

  - name: Carpenter.Version.Patch
    value: $[ dependencies.build.outputs['initializeBuildVersion.patchVersion'] ]

  - name: Carpenter.Version.Revision
    value:  $[ dependencies.build.outputs['initializeBuildVersion.revision'] ]

  - ${{ if or(eq(variables['Build.Reason'],'IndividualCI'), eq(variables['Build.Reason'],'BatchedCI'), and(eq(variables['Build.Reason'],'Manual'), eq(parameters['buildType'],'CI'))) }}:
    - name: Carpenter.ContinuousIntegration.Date
      value: $[ dependencies.build.outputs['initializeBuildVersion.continuousIntegrationDate'] ]

    - name: Carpenter.ContinuousIntegration.Revision
      value: $[ dependencies.build.outputs['initializeBuildVersion.continuousIntegrationRevision'] ]

  - ${{ if eq(variables['Build.Reason'],'PullRequest') }}:
    - name: Carpenter.PullRequest.Revision
      value: $[ dependencies.build.outputs['initializeBuildVersion.pullRequestRevision'] ]

  - ${{ if eq(parameters['buildType'],'Prerelease')}}:
    - name: Carpenter.Prerelease.Label
      value: $[ dependencies.build.outputs['initializeBuildVersion.prereleaseLabel'] ]
  
    - name: Carpenter.Prerelease.Revision
      value: $[ dependencies.build.outputs['finalizeBuildVersion.prereleaseRevision'] ]

  - ${{ if eq(parameters['buildType'],'Release')}}:
    - name: Carpenter.Version.IncrementOnRelease
      value: $[ dependencies.build.outputs['initializeBuildVersion.incrementVersionOnRelease'] ]

  - name: Carpenter.Version.Label
    value: $[ dependencies.build.outputs['finalizeBuildVersion.versionLabel'] ]

  - name: Carpenter.Version
    value: $[ dependencies.build.outputs['finalizeBuildVersion.version'] ]
